//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Tweet = newTweetTable("tcr", "tweet", "")

type tweetTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnString
	Original  postgres.ColumnString
	Checksum  postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TweetTable struct {
	tweetTable

	EXCLUDED tweetTable
}

// AS creates new TweetTable with assigned alias
func (a TweetTable) AS(alias string) *TweetTable {
	return newTweetTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TweetTable with assigned schema name
func (a TweetTable) FromSchema(schemaName string) *TweetTable {
	return newTweetTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TweetTable with assigned table prefix
func (a TweetTable) WithPrefix(prefix string) *TweetTable {
	return newTweetTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TweetTable with assigned table suffix
func (a TweetTable) WithSuffix(suffix string) *TweetTable {
	return newTweetTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTweetTable(schemaName, tableName, alias string) *TweetTable {
	return &TweetTable{
		tweetTable: newTweetTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newTweetTableImpl("", "excluded", ""),
	}
}

func newTweetTableImpl(schemaName, tableName, alias string) tweetTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		OriginalColumn  = postgres.StringColumn("original")
		ChecksumColumn  = postgres.StringColumn("checksum")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, OriginalColumn, ChecksumColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{OriginalColumn, ChecksumColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return tweetTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Original:  OriginalColumn,
		Checksum:  ChecksumColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
